// source: instrument.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.instrument.InstrumentModifiers', null, global);
goog.exportSymbol('proto.instrument.InstrumentString', null, global);
goog.exportSymbol('proto.instrument.InstrumentTemplate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.instrument.InstrumentString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.instrument.InstrumentString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.instrument.InstrumentString.displayName = 'proto.instrument.InstrumentString';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.instrument.InstrumentTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.instrument.InstrumentTemplate.repeatedFields_, null);
};
goog.inherits(proto.instrument.InstrumentTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.instrument.InstrumentTemplate.displayName = 'proto.instrument.InstrumentTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.instrument.InstrumentModifiers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.instrument.InstrumentModifiers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.instrument.InstrumentModifiers.displayName = 'proto.instrument.InstrumentModifiers';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.instrument.InstrumentString.prototype.toObject = function(opt_includeInstance) {
  return proto.instrument.InstrumentString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.instrument.InstrumentString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.instrument.InstrumentString.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scaleLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    note: jspb.Message.getFieldWithDefault(msg, 3, ""),
    octave: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gauge: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    brand: jspb.Message.getFieldWithDefault(msg, 7, ""),
    tension: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    breakingPoint: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    stress: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    frequency: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    unitWeight: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    tensile: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.instrument.InstrumentString}
 */
proto.instrument.InstrumentString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.instrument.InstrumentString;
  return proto.instrument.InstrumentString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.instrument.InstrumentString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.instrument.InstrumentString}
 */
proto.instrument.InstrumentString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStringNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScaleLength(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOctave(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGauge(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTension(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBreakingPoint(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStress(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFrequency(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnitWeight(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTensile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.instrument.InstrumentString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.instrument.InstrumentString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.instrument.InstrumentString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.instrument.InstrumentString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScaleLength();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOctave();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGauge();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTension();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getBreakingPoint();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getStress();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getUnitWeight();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getTensile();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional int32 string_number = 1;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getStringNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setStringNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double scale_length = 2;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getScaleLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setScaleLength = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string note = 3;
 * @return {string}
 */
proto.instrument.InstrumentString.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 octave = 4;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getOctave = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setOctave = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 offset = 5;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double gauge = 6;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getGauge = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setGauge = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string brand = 7;
 * @return {string}
 */
proto.instrument.InstrumentString.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional double tension = 8;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getTension = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setTension = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double breaking_point = 9;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getBreakingPoint = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setBreakingPoint = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double stress = 10;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getStress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setStress = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double frequency = 11;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double unit_weight = 12;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getUnitWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setUnitWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional int32 tensile = 13;
 * @return {number}
 */
proto.instrument.InstrumentString.prototype.getTensile = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentString} returns this
 */
proto.instrument.InstrumentString.prototype.setTensile = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 *  of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.instrument.InstrumentTemplate.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.instrument.InstrumentTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.instrument.InstrumentTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.instrument.InstrumentTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.instrument.InstrumentTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrumentType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tuningType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tuningOffset: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stringSet: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.instrument.InstrumentTemplate}
 */
proto.instrument.InstrumentTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.instrument.InstrumentTemplate;
  return proto.instrument.InstrumentTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.instrument.InstrumentTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.instrument.InstrumentTemplate}
 */
proto.instrument.InstrumentTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstrumentType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStringCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTuningType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTuningOffset(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStringSet(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.instrument.InstrumentTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.instrument.InstrumentTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.instrument.InstrumentTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.instrument.InstrumentTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrumentType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStringCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTuningType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTuningOffset();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getStringSet();
  if (f.length > 0) {
    writer.writePackedDouble(
      5,
      f
    );
  }
};


/**
 * optional string instrument_type = 1;
 * @return {string}
 */
proto.instrument.InstrumentTemplate.prototype.getInstrumentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.instrument.InstrumentTemplate} returns this
 */
proto.instrument.InstrumentTemplate.prototype.setInstrumentType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 string_count = 2;
 * @return {number}
 */
proto.instrument.InstrumentTemplate.prototype.getStringCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentTemplate} returns this
 */
proto.instrument.InstrumentTemplate.prototype.setStringCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string tuning_type = 3;
 * @return {string}
 */
proto.instrument.InstrumentTemplate.prototype.getTuningType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.instrument.InstrumentTemplate} returns this
 */
proto.instrument.InstrumentTemplate.prototype.setTuningType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 tuning_offset = 4;
 * @return {number}
 */
proto.instrument.InstrumentTemplate.prototype.getTuningOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentTemplate} returns this
 */
proto.instrument.InstrumentTemplate.prototype.setTuningOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated double string_set = 5;
 * @return {!Array<number>}
 */
proto.instrument.InstrumentTemplate.prototype.getStringSet = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.instrument.InstrumentTemplate} returns this
 */
proto.instrument.InstrumentTemplate.prototype.setStringSet = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.instrument.InstrumentTemplate} returns this
 */
proto.instrument.InstrumentTemplate.prototype.addStringSet = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.instrument.InstrumentTemplate} returns this
 */
proto.instrument.InstrumentTemplate.prototype.clearStringSet = function() {
  return this.setStringSet([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.instrument.InstrumentModifiers.prototype.toObject = function(opt_includeInstance) {
  return proto.instrument.InstrumentModifiers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.instrument.InstrumentModifiers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.instrument.InstrumentModifiers.toObject = function(includeInstance, msg) {
  var f, obj = {
    minScaleLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    maxScaleLength: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    minTension: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    maxTension: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    brand: jspb.Message.getFieldWithDefault(msg, 5, ""),
    woundThirdThreshold: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tensile: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.instrument.InstrumentModifiers}
 */
proto.instrument.InstrumentModifiers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.instrument.InstrumentModifiers;
  return proto.instrument.InstrumentModifiers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.instrument.InstrumentModifiers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.instrument.InstrumentModifiers}
 */
proto.instrument.InstrumentModifiers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinScaleLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxScaleLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinTension(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxTension(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWoundThirdThreshold(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTensile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.instrument.InstrumentModifiers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.instrument.InstrumentModifiers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.instrument.InstrumentModifiers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.instrument.InstrumentModifiers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinScaleLength();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMaxScaleLength();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMinTension();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getMaxTension();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWoundThirdThreshold();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTensile();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional double min_scale_length = 1;
 * @return {number}
 */
proto.instrument.InstrumentModifiers.prototype.getMinScaleLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentModifiers} returns this
 */
proto.instrument.InstrumentModifiers.prototype.setMinScaleLength = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double max_scale_length = 2;
 * @return {number}
 */
proto.instrument.InstrumentModifiers.prototype.getMaxScaleLength = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentModifiers} returns this
 */
proto.instrument.InstrumentModifiers.prototype.setMaxScaleLength = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double min_tension = 3;
 * @return {number}
 */
proto.instrument.InstrumentModifiers.prototype.getMinTension = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentModifiers} returns this
 */
proto.instrument.InstrumentModifiers.prototype.setMinTension = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double max_tension = 4;
 * @return {number}
 */
proto.instrument.InstrumentModifiers.prototype.getMaxTension = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentModifiers} returns this
 */
proto.instrument.InstrumentModifiers.prototype.setMaxTension = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string brand = 5;
 * @return {string}
 */
proto.instrument.InstrumentModifiers.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.instrument.InstrumentModifiers} returns this
 */
proto.instrument.InstrumentModifiers.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string wound_third_threshold = 6;
 * @return {string}
 */
proto.instrument.InstrumentModifiers.prototype.getWoundThirdThreshold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.instrument.InstrumentModifiers} returns this
 */
proto.instrument.InstrumentModifiers.prototype.setWoundThirdThreshold = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 tensile = 7;
 * @return {number}
 */
proto.instrument.InstrumentModifiers.prototype.getTensile = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.instrument.InstrumentModifiers} returns this
 */
proto.instrument.InstrumentModifiers.prototype.setTensile = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


goog.object.extend(exports, proto.instrument);
